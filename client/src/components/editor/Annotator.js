import { useEffect, useState} from 'react'
import PropTypes from 'prop-types'
import { ImageInfo } from '../../helpers/EditorHelper'
import AIAnnotator from './AIAnnotator'
import UserAnnotator from './UserAnnotator'
import Classifier from './Classifier'
import AISelection from './AISelection'
import {getImgFilename} from '../../helpers/EditImageHelper'
import { getImageMetadataApiCall } from '../../api/GetImageMetadata'
import styles from './Annotator.module.scss'
import ProgressBar from './ProgressBar'

/**
 * The Annotator component is meant to help the user produce an annotation for an image as an end result
 * It keeps track of the different stages in the image annotation process (classify, ai, manual, save)
 *
 * @param {ImageInfo} currImage Metadata for current image under annotation
 * @param {String} ebookId The UUID for the ebook generated by server
 * @component
 * @returns The Annotator Component: different view depending on the stage
 */

function Annotator({ currImage, ebookId }) {

    const [stage, setStage] = useState(null)
    const [imageId, setImageId] = useState(-1)
    const [existingAltText, setExistingAltText] = useState(null)

    const [currClassification, setCurrClassification] = useState(null)
    const [currAiSelected, setCurrAISelected] = useState(null)
    // TODO: could be used to get the annotation history
    const [aiAnnotationList, setAiAnnotationList] = useState([])
    const [userAnnotationList, setUserAnnotationList] = useState([])
    const [sentence, setSentence] = useState(null)


    // Executed every time the currentImage changes
    useEffect(() => {
        // Note that this start stage is overidden by the image overview
        if (!currImage) {
            setStage("start")
        } else {
            setStage("classify")
            // Remove all AI suggestions when next image is loaded
            setCurrClassification(null)
            setCurrAISelected(null)
            setAiAnnotationList([])
            setUserAnnotationList([])
            setSentence(null)
            
            // Save existing alt-text of image
            if (currImage) {
                const altText = currImage.element.alt
                if (altText) {
                    setExistingAltText(altText)
                }
            }
            // For each image that is loaded, client fetches all metadata from server (even if the image does not exist yet)
            fetchImageMetadata()
        }
    }, [currImage])
    
    /**
     * Makes API call to server for fetching image metadata
     * i.e. the image itself and all annotations linked to it
     * and updates state accordingly
     */
    function fetchImageMetadata() {

        console.log('Fetching image metadata...')

        getImageMetadataApiCall(ebookId, getImgFilename(currImage)).then(
            (result) => {
                if (Object.prototype.hasOwnProperty.call(result, 'annotations')) {
                    console.log('Annotations: ')
                    console.log(result.annotations)

                    // Decorative images don't have image descriptions
                    if (currClassification !== 'Decoration') {
                        setStage("overview")
                    }
                    // For each HUM annotation, add to user annotation list (for display in UserAnnotator)
                    // Note that for now this list always contains 1 HUM annotation
                    result.annotations.forEach((el) => {
                        if (el.type === 'HUM') {
                            setUserAnnotationList([...userAnnotationList, el.text])
                        }
                    })
                    // Display previously generated AI suggestions when revisiting image
                    // TODO: distinguish between different AIs (have separate lists for labels and descriptions)
                    const aiLabels = result.annotations.filter(el => el.type !== 'HUM')
                    if (aiLabels.length > 0) {
                        console.log(currAiSelected)
                        const mostRecentAiChoice = aiLabels[aiLabels.length - 1].type
                        if(currAiSelected == null || currAiSelected==mostRecentAiChoice) {
                            setCurrAISelected(mostRecentAiChoice)
                            if(mostRecentAiChoice === 'BB_AZURE_SEN'){
                                setSentence(aiLabels.pop().text)
                            }
                            
                            setAiAnnotationList(aiLabels)
                        }
                        // else if(currAiSelected != mostRecentAiChoice) {
                        //     setAiAnnotationList([])
                        //     setSentence("")
                        // }
                        
                        // Get the most recent AI choice to display

                        console.log(mostRecentAiChoice)
                        
                    }
                }    
                
                if (Object.prototype.hasOwnProperty.call(result, 'image')) {
                    console.log('Image metadata: ')
                    console.log(result.image)
                    setImageId(result.image.id)
                    setCurrClassification(result.image.classification)
                }
            },
            (error) => {
                if (error.cause === 404) {
                    console.log(
                        'Image does not exist on server yet, will be created after the first time classifying.'
                    )
                    setCurrClassification(null)
                }
            }
        )

    }

    return (
        <div className={styles.container}>

            <ProgressBar
                currStage={stage}
                setStage={setStage}
                classification={currClassification}
                userAnnotations={userAnnotationList}
            />

            {
                {
                'start': 
                    <div className={styles.start_msg}> Please select an image to annotate. </div>,

                'classify': 
                    <Classifier
                        currImage={currImage}
                        ebookId={ebookId}
                        setImageId={setImageId}
                        currClassification={currClassification}
                        setCurrClassification={setCurrClassification}
                        setStage={setStage}>
                        {' '}
                    </Classifier>,

                'ai-selection':
                   <AISelection 
                        setStage={setStage}
                        currAiSelected={currAiSelected}
                        setCurrAiSelected={setCurrAISelected}
                        setAiAnnotationList={setAiAnnotationList}
                        setSentence={setSentence}
                    />,
                
                'annotate': 
                    <div className={styles.container}>
                        <AIAnnotator
                            aiAnnotationList={aiAnnotationList}
                            setAiAnnotationList={setAiAnnotationList}
                            currImage={currImage}
                            ebookId={ebookId}
                            imageId={imageId} 
                            aiChoice={currAiSelected}
                            sentence={sentence}
                            setSentence={setSentence}
                        >
                            {' '}
                        </AIAnnotator>
                        <UserAnnotator 
                            annotationList={userAnnotationList} 
                            setAnnotationList={setUserAnnotationList}
                            currImage={currImage}
                            ebookId={ebookId}
                            imageId={imageId}
                            setImageId={setImageId}
                            existingAlt={existingAltText}
                            setStage={setStage}
                        />
                    </div>,

                'overview' : 
                    <div className={styles.overview}>
                    <div className={styles.overview_info}>
                        <br/>
                        <strong> Classification: </strong> {currClassification}
                        <br/>
                    </div>
                    <div className={styles.overview_info}>
                        <strong> Image description: </strong> 
                        {userAnnotationList[userAnnotationList.length - 1]}
                    </div>
                        <button type="button"
                                    className={styles.restart_button}
                                    onClick={() => {
                                            setStage("classify")
                                            setCurrClassification(null)
                                            setCurrAISelected(null)
                                            setAiAnnotationList([])
                                            setUserAnnotationList([])
                                            }}>
                                    Restart image annotation
                        </button>
                    </div>

                }[stage]
            }
        </div>
    )
}

Annotator.propTypes = {
    currImage: PropTypes.instanceOf(ImageInfo).isRequired,
    ebookId: PropTypes.string.isRequired,
}

export default Annotator
