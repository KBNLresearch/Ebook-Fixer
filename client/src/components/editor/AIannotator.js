import React, { useEffect, useRef } from 'react';
import styles from './Annotator.module.scss';
import { ReactComponent as SettingsSVG } from '../../assets/svgs/settings-icon.svg'
import { classifyImageApiCall } from '../../api/ClassifyImage.js';
import { getImgFilename, getLocation, getRawContext } from '../../helpers/EditImageHelper'

/**
 * The AI annotator component is in charge of classifying the image
 * and querying the server for a black-box AI description for it
 * @param {{currImage: ImageInfo}} props The props of the component
 *  Note that changing of the image is propagated to this child
 * @param {{ebookId: The UUID for the ebook generated by server}} props The props of the component
 * @returns The AIannotator component
 */
function AIannotator(props) {

    // TODO: switch to AI generation view --> show textArea instead of dropdown menu
    // TODO: allow user to change classification later again, after AI generation

    // References/hooks to React DOM elements
    const saveButtonRef = useRef(null)
    const dropdownRef = useRef(null)

    // Creates a hook that executes the arrow func. every time imageSelected changes
    // TODO: also hide button for User annotation after saving
    useEffect(() => {
        if (!props.currImage) {
           saveButtonRef.current.disabled = true
        } else {
           saveButtonRef.current.disabled = false   
           console.log('Image selected: Save classification button enabled')
        }
    }, [props.currImage])

    /**
     * @returns the currently selected classification
     */
        function getClassification() {
            if (props.currImage) {
                var choice = dropdownRef.current.options[dropdownRef.current.selectedIndex].value
                console.log('Classification chosen: ' + choice)
                return choice;
            }
        }

     /** 
      * Makes API call to server and disables "Save" button
     */
    function handleSubmit() {
        if (props.currImage) {
            // When only the client is run during development, we still want to inspect this function though
            if (!props.ebookId) {
                console.log('No e-book UUID stored on client!')
            }



            classifyImageApiCall(props.ebookId, getImgFilename(props.currImage), getLocation(props.currImage), getClassification(), getRawContext(props.currImage))
            .then(result => {
                console.log(JSON.stringify(result));
                if (result.hasOwnProperty("id")){
                        console.log(result.id);
                        props.setImageId(result.id)
                   }
            })
            saveButtonRef.current.disabled = true
            console.log('Save classification button disabled.')
        }
    }

    const options = ['Decorative', 'Informative', 'Photo', 'Illustration', 'Figure', 'Symbol', 'Drawing', 'Comic', 'Logo', 'Graph', 'Map']

    return (
        <div className={styles.ai_input}>
            {/* Showing the textarea only after classification, in the AI generation step */}
            {/* <textarea placeholder="Loading AI zannotation..." disabled></textarea> */}
            {/* <button className={styles.icon} disabled><SettingsSVG title='Reclassify'></SettingsSVG></button>     */}
            <label>Please classify your selected image</label>
                <select name='selectedClass' ref={dropdownRef} className={styles.dropdown} onChange={() => saveButtonRef.current.disabled = false}>
                    {options.map((opt) => <option value={opt} > {opt} </option>)}
                </select>
            <button className={styles.save_button} ref={saveButtonRef} onClick={() => handleSubmit()}> Save classification </button>        
        </div>
    )
}

export default AIannotator;