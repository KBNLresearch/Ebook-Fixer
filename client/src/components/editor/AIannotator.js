import { useEffect, useRef } from 'react'
import PropTypes from 'prop-types'
import styles from './Annotator.module.scss'
import { ReactComponent as SettingsSVG } from '../../assets/svgs/settings-icon.svg'
import { classifyImageApiCall } from '../../api/ClassifyImage'
import { ImageInfo } from '../../helpers/EditorHelper'
import {
    getImgFilename,
    getLocation,
    getRawContext,
} from '../../helpers/EditImageHelper'

/**
 * The AI annotator component is in charge of classifying the image
 * and querying the server for a black-box AI description for it
 * @param {{currImage: ImageInfo}} props The props of the component
 *  Note that changing of the image is propagated to this child
 * @param {{ebookId: The UUID for the ebook generated by server}} props The props of the component
 * @returns The AIannotator component
 */
function AIannotator({ currImage, ebookId }) {
    // TODO: switch to AI generation view --> show textArea instead of dropdown menu
    // TODO: allow user to change classification later again, after AI generation

    // References/hooks to React DOM elements
    const saveButtonRef = useRef(null)
    const dropdownRef = useRef(null)

    // Creates a hook that executes the arrow func. every time imageSelected changes
    // TODO: also hide button for User annotation after saving
    useEffect(() => {
        if (!currImage) {
            saveButtonRef.current.disabled = true
        } else {
            saveButtonRef.current.disabled = false
        }
    }, [currImage])

    /**
     * @returns the currently selected classification
     */
    function getClassification() {
        if (currImage) {
            const choice =
                dropdownRef.current.options[dropdownRef.current.selectedIndex]
                    .value
            return choice
        }
    }

    /**
     * Makes API call to server and disables "Save" button
     */
    function handleSubmit() {
        if (currImage) {
            // When only the client is run during development, we still want to inspect this function though
            if (!ebookId) {
                console.log('No e-book UUID stored on client!')
            }
            classifyImageApiCall(
                ebookId,
                getImgFilename(currImage),
                getLocation(currImage),
                getClassification(),
                getRawContext(currImage)
            )
            saveButtonRef.current.disabled = true
        }
    }

    const options = [
        'Decorative',
        'Informative',
        'Photo',
        'Illustration',
        'Figure',
        'Symbol',
        'Drawing',
        'Comic',
        'Logo',
        'Graph',
        'Map',
    ]

    return (
        <div className={styles.ai_input}>
            {/* Showing the textarea only after classification, in the AI generation step */}
            {/* <textarea placeholder="Loading AI zannotation..." disabled></textarea> */}
            {/* <button className={styles.icon} disabled><SettingsSVG title='Reclassify'></SettingsSVG></button>     */}
            <label htmlFor="selectClass">
                Please classify your selected image
            </label>
            <select
                name="selectedClass"
                id="selectClass"
                ref={dropdownRef}
                className={styles.dropdown}
                onChange={() => {
                    saveButtonRef.current.disabled = false
                }}>
                {options.map((opt) => (
                    <option value={opt}> {opt} </option>
                ))}
            </select>
            <button
                type="button"
                className={styles.save_button}
                ref={saveButtonRef}
                onClick={() => handleSubmit()}>
                {' '}
                Save classification{' '}
            </button>
        </div>
    )
}

AIannotator.propTypes = {
    currImage: PropTypes.instanceOf(ImageInfo).isRequired,
    ebookId: PropTypes.string.isRequired,
}

export default AIannotator
