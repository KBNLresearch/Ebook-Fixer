import React, { useEffect, useState } from 'react';
import styles from './Annotator.module.scss';
import { ReactComponent as SettingsSVG } from '../../assets/svgs/settings-icon.svg'
import { classifyImageApiCall } from '../../api/ClassifyImage.js';

/**
 * The AI annotator component is in charge of classifying the image
 * and querying the server for a black-box AI description for it
 * @param {{currImage: ImageInfo}} props The props of the component
 *  Note that changing of the image is propagated to this child
 *  Note that classification is only possible if there is a currImage selected!
 * @param {{currEbook: EbookInfo}} props The props of the component
 * @param {{ebookId: The UUID for the ebook generated by server}} props The props of the component
 * @returns The AIannotator component
 */
function AIannotator(props) {

    // TODO: switch to AI generation view --> show textArea instead of dropdown menu
    // TODO: allow user to change classification later again, after AI generation

    // Creates a hook that executes the arrow func. every time imageSelected changes
    useEffect(() => {
        const button = document.getElementById('saveButton')
        if (!props.currImage) {
            button.disabled = true
        } else {
           button.disabled = false     
           console.log('Image selected: Save classification button enabled')
        }
    }, [props.currImage])


    /**
     * @returns the currently selected classification
     */
    function getClassification() {
        if (props.currImage) {
            var dropdown = document.getElementById('classId')
            var choice = dropdown.options[dropdown.selectedIndex].value
            console.log('Classification chosen: ' + choice)
            return choice;
        }
    }

    /**
     * @returns UUID of currEbook, generated by server upon upload of ePub
     */
    function getEbookUUID() {
        if (props.currImage) {
            var eBookUUID = props.ebookId
            console.log('UUID of ebook of classified image: ' + eBookUUID)
            return eBookUUID
        }
    }

    /**
     * @returns the filename of the classifiesd image
     * For example: "2874324973610680654_cover.jpg"
     */
    function getImgFilename() {
        if (props.currImage) {
            var currImageName = props.currImage.asset.href
            console.log('Current image classified: ' + currImageName)
            return currImageName
        } 
    }

    /**
     * @returns the HTML filename in which the image occurs
     * For example: 568395898401760676_31979-h-0.htm.html
     */
    function getLocation() {
        if (props.currImage) {
            var currHTMLFile = props.currImage.section.href
            console.log('Curr HTML file of classified image: ' + currHTMLFile)
            return currHTMLFile
        }
    }

    /** TODO: Extract raw context (for AI annotation generation on server?) 
     * But this may not be necessary, since server has access to HTML file too
     * @returns the raw context of the image, which is an optional field on the server.
     */
    function getRawContext() {
        if (props.currImage) {
            return 'RAW CONTEXT'
        }
    }

     /** 
     * @param {String} ebook_uuid: ...
     * @param {String} img_filename 
     * @param {String} location 
     * @param {String} classification 
     * @param {String} context 
     */
    function handleSubmit(ebook_uuid, img_filename, location, classification, context) {
        classifyImageApiCall(ebook_uuid, img_filename, location, classification, context)
        const button = document.getElementById('saveButton')
        button.disabled = true
        console.log('Save classification button disabled.')
    }

    return (
        <div className={styles.ai_input}>
            {/* Showing the textarea only after classification, in the AI generation step */}
            {/* <textarea placeholder="Loading AI zannotation..." disabled></textarea> */}
            <button className={styles.icon} disabled><SettingsSVG title='Reclassify'></SettingsSVG></button>    
            <label>Please classify your selected image...:</label>
                <select name='selectedClass' id='classId'>
                <option value='Decorative' defaultValue >Decorative</option>
                <option value='Informative'>Informative</option>
                <option value='Photo'>Photo</option>
                <option value='Illustration'>Illustration</option>
                <option value='Figure'>Figure</option>
                <option value='Symbol'>Symbol</option>
                <option value='Drawing'>Drawing</option>
                <option value='Comic'>Comic</option>
                <option value='Logo'>Logo</option>
                <option value='Graph'>Graph</option>
                <option value='Map'>Map</option>
                </select>
            <button className={styles.save_button} id='saveButton' onClick={() => handleSubmit(getEbookUUID(), getImgFilename(), getLocation(), getClassification(), getRawContext())}> Save classification </button>        
        </div>
    )
}

export default AIannotator;