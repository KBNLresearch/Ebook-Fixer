import { useEffect, useState, useRef } from 'react'
import PropTypes from 'prop-types'
import { ImageInfo } from '../../helpers/EditorHelper'
import {saveUserAnnotation} from '../../api/AnnotateImage'
import {getImgFilename} from '../../helpers/EditImageHelper'
import styles from './Annotator.module.scss'

/**
 * The UserAnnotator component has a textbox with a button for the history of the annotations for that image.
 * It should receive the history of the annotations.
 * And a function to save the annotation somewhere once the user types it.
 *
 * @param {{annotationList: List of Strings}} props List of the human annotations for this image
 * @param {{setAnnotationList: SetStateAction}} props Updates the list of human annotations
 * @param {{currImage: ImageInfo}} props Metadata for image
 * @param {{ebookId: String}} props The UUID for the ebook generated by server
 * @param {{imageId: String}} props The image id generated by server
 * @param {{setImageId: SetStateAction}} props Updates image id
 * @param {{existingAlt: String}} props The existing alt-text of the image to display separately
 * @returns The UserAnnotator component
 */
function UserAnnotator({ annotationList, setAnnotationList, currImage, ebookId, imageId, setImageId, existingAlt }) {

    const [textValue, setTextValue] = useState('')
    const saveButton = useRef(null)

    useEffect(() => {

        const list = annotationList

        if (list.length > 0) {
            // Display the latest human annotation
            setTextValue(list[list.length - 1])
            saveButton.current.disabled = true
            saveButton.current.innerText = 'Annotation saved'
        } else {
            // No human annotations or existing ALT-text
            setTextValue('')
            saveButton.current.disabled = false
            saveButton.current.innerText = 'Save annotation'
        }

    }, [annotationList])


     // TODO: add a settings button for explicitly editing the manual annotation
     // Currently we enable save button again as soon as user starts typing (onFocus)

    function handleClick() {

        if (textValue === '') {
            window.alert('Please provide a non-empty image description.')
        } else {
            saveUserAnnotation(
                ebookId,
                imageId,
                getImgFilename(currImage),
                textValue
            ).then((result) => {
                // Keep image id up to date after annotating
                if (Object.prototype.hasOwnProperty.call(result, 'image')) {
                    setImageId(result.image)
                }
            })
            saveButton.current.innerText = 'Annotation saved'
            saveButton.current.disabled = true
            setAnnotationList([...annotationList, textValue])
        }
    }

    return (
        <div className={styles.user_control}>
            
            <div className={styles.existing_alt}> 
                <br/>
                <br/>
                <strong> {existingAlt !== null ? 'Existing alt-text: ' : 'No existing alt-text '} </strong> {existingAlt} 
                <br/>
                <br/>
                <br/>
            </div>

             <label htmlFor="userTextArea" className={styles.box_label}> Manual image description </label>
            <textarea
                value={textValue}
                id="userTextArea"
                onChange={(e) => {
                    setTextValue(e.target.value)
                }}
                placeholder="Your annotation here..."
                onFocus={() => {
                    saveButton.current.disabled = false
                }}
            />
            <button type="button"
                        className={styles.save_button}
                        ref={saveButton}
                        onClick={() => handleClick()}>
                        Save Annotation
            </button> 
            {/* // History button!
            <button
                type="button"
                className={
                    styles.icon + ' ' + (typing ? styles.transparent : '')
                }>
                <HistorySVG title="Annotation History" />
            </button> */}
        </div>
    )
}

UserAnnotator.propTypes = {
    annotationList: PropTypes.arrayOf(PropTypes.string).isRequired,
    setAnnotationList: PropTypes.func.isRequired,
    currImage: PropTypes.instanceOf(ImageInfo).isRequired,
    ebookId: PropTypes.string.isRequired, 
    imageId: PropTypes.number.isRequired,
    setImageId: PropTypes.func.isRequired,
    existingAlt: PropTypes.string.isRequired
}

export default UserAnnotator