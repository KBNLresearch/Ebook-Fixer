import { useEffect, useState, useRef } from 'react'
import PropTypes from 'prop-types'
import { ImageInfo } from '../../helpers/EditorHelper'
import { saveUserAnnotation } from '../../api/AnnotateImage'
import { getImgFilename } from '../../helpers/EditImageHelper'
import styles from './Annotator.module.scss'

/**
 * The UserAnnotator component handles manual image annotations to be typed and saved in a textbox.
 *
 * @param {String[]} annotationList List of the human annotations for this image
 * @param {external: } setAnnotationList Updates the list of human annotations
 * @param {ImageInfo} currImage Metadata for image
 * @param {String} ebookId The UUID for the ebook generated by server
 * @param {String} imageId The image id generated by server
 * @param {external: SetStateAction} setImageId Updates image id
 * @param {String} existingAlt The existing alt-text of the image to display separately
 * @param {external: SetStateAction} setStage Sets the next stage in the image annotation process
 * @param {Boolean} copied Stores whether sentence has been copied
 * @param {external: setCopied} setCopied Sets the copied attribute
 * @param {String} sentence The sentence generated by the AI
 * @component
 * @returns The UserAnnotator component
 */
function UserAnnotator({
    annotationList,
    setAnnotationList,
    currImage,
    ebookId,
    imageId,
    setImageId,
    existingAlt,
    setStage,
    copied,
    setCopied,
    sentence,
}) {
    const [textValue, setTextValue] = useState('')
    const saveButton = useRef(null)
    const [errortxt, setErrortxt] = useState('')

    useEffect(() => {
        const list = annotationList
        if (list.length > 0) {
            // Display the latest human annotation
            setTextValue(list[list.length - 1])
            saveButton.current.disabled = true
            saveButton.current.innerText = 'Annotation saved'
        } else {
            // No human annotations or existing ALT-text
            setTextValue('')
            saveButton.current.disabled = false
            saveButton.current.innerText = 'Save annotation'
        }
        if (copied) {
            setTextValue(sentence)
        }
    }, [annotationList, copied])

    // TODO: add a settings button for explicitly editing the manual annotation
    // Currently we enable save button again as soon as user starts typing (onFocus)

    function handleClick() {
        if (textValue === '') {
            
            setErrortxt('Please provide a non-empty image description')
            console.log(errortxt)
        } else{
            saveUserAnnotation(
                ebookId,
                imageId,
                getImgFilename(currImage),
                textValue
            ).then((result) => {
                // Keep image id up to date after annotating
                if (Object.prototype.hasOwnProperty.call(result, 'image')) {
                    setImageId(result.image)
                }
            }).catch((error) => setErrortxt('Something went wrong. Try again.'))
            saveButton.current.innerText = 'Annotation saved'
            saveButton.current.disabled = true
            setAnnotationList([...annotationList, textValue])
            setCopied(false)
            setStage('overview')
            }
        
    }

    return (
        <div className={styles.user_control}>
            <div className={styles.existing_alt}>
                <strong>
                    {' '}
                    {existingAlt !== null
                        ? 'Existing alt-text: '
                        : 'No existing alt-text '}{' '}
                </strong>{' '}
                {existingAlt}
            </div>

            <textarea
                value={textValue}
                id="userTextArea"
                onChange={(e) => {
                    setTextValue(e.target.value)
                }}
                placeholder="Your annotation here..."
                onFocus={() => {
                    saveButton.current.disabled = false
                }}
            />
            { errortxt!="" && <div style={{color:'red'}}> {errortxt}</div>
            }
            <button
                type="button"
                className={styles.save_button}
                ref={saveButton}
                onClick={() => handleClick()}>
                Save Annotation
            </button>
            
        </div>
    )
}

UserAnnotator.propTypes = {
    annotationList: PropTypes.arrayOf(PropTypes.string).isRequired,
    setAnnotationList: PropTypes.func.isRequired,
    currImage: PropTypes.instanceOf(ImageInfo).isRequired,
    ebookId: PropTypes.string.isRequired,
    imageId: PropTypes.number.isRequired,
    setImageId: PropTypes.func.isRequired,
    existingAlt: PropTypes.string.isRequired,
    setStage: PropTypes.func.isRequired,
    copied: PropTypes.bool.isRequired,
    setCopied: PropTypes.func.isRequired,
    sentence: PropTypes.string.isRequired,
}

export default UserAnnotator
