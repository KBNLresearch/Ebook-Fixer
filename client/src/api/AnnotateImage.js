/**
 * sends a POST request to server to save the annotation made by the user
 *
 * @category API
 * @param {String} ebookId id of ebook in database
 * @param {String} imageId id of image in database
 * @param {String} fileName file name of image
 * @param {String} txt that user typed
 * @returns response to the request
 * @see Server Documentation for description of request & response
 */

export function saveUserAnnotation(ebookId, imageId, fileName, txt) {
    return fetch(process.env.REACT_APP_API_URL + 'annotations/save/', {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            ebook: ebookId,
            id: imageId,
            filename: fileName,
            text: txt,
        }),
    })
        .then((res) => res.json()) // if it's in json format
        .then(
            (result) => {
                console.log(result)
                return result
            },
            // Error handling
            (error) => {
                window.alert('error! Please try again.')
                console.log(error)
                throw error
            }
        )
}


/**
 * sends a PUT request to server to generate AI labels from Google Cloud Vision
 *
 * @category API
 * @param {String} ebookId id of ebook in database
 * @param {String} imageId id of image in database
 * @param {String} fileName file name of image
 * @returns response to the request
 * @see Server Documentation for description of request & response
 */

export function  getGoogleAnnotation(ebookId, imageId, fileName) {
    return fetch(process.env.REACT_APP_API_URL + 'annotations/generate/google/', {
        method: 'PUT',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            id: imageId,
            ebook: ebookId,
            filename: fileName,
        }),
    })
        .then((res) => {
            if (res.ok) {
                return res.json()
            }

            throw new Error(res.status + ', message: ' + res.statusText)
        }) // if it's in json format
        .then(
            (result) => {
                console.log(result)
                return result
            },
            // Error handling
            (error) => {
                window.alert('error! Please try again.')
                console.log(error)
                throw error
            }
        )
}


/**
 * sends a PUT request to server to generate AI labels + description generated by Microsoft Azure
 *
 * @category API
 * @param {String} ebookId id of ebook in database
 * @param {String} imageId id of image in database
 * @param {String} fileName file name of image
 * @returns response to the request
 * @see Server Documentation for description of request & response
 */

export function  getMicrosoftAnnotation(ebookId, imageId, fileName) {
    return fetch(process.env.REACT_APP_API_URL + 'annotations/generate/azure/', {
        method: 'PUT',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            id: imageId,
            ebook: ebookId,
            filename: fileName,
        }),
    })
        .then((res) => {
            if (res.ok) {
                return res.json()
            }

            throw new Error(res.status + ', message: ' + res.statusText)
        }) // if it's in json format
        .then(
            (result) => {
                console.log(result)
                return result
            },
            // Error handling
            (error) => {
                window.alert('error! Please try again.')
                console.log(error)
                throw error
            }
        )
}

/**
 * sends a PUT request to server to generate textual context keywords generated by Yake
 *
 * @category API
 * @param {String} ebookId id of ebook in database
 * @param {String} imageId id of image in database
 * @param {String} fileName file name of image
 * @returns response to the request
 * @see Server Documentation for description of request & response
 */

 export function  getYakeContextKeywords(ebookId, imageId, fileName) {
    return fetch(process.env.REACT_APP_API_URL + 'annotations/generate/yake/', {
        method: 'PUT',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            id: imageId,
            ebook: ebookId,
            filename: fileName,
        }),
    })
        .then((res) => {
            if (res.ok) {
                return res.json()
            }

            throw new Error(res.status + ', message: ' + res.statusText)
        }) // if it's in json format
        .then(
            (result) => {
                console.log(result)
                return result
            },
            // Error handling
            (error) => {
                window.alert('error! Please try again.')
                console.log(error)
                throw error
            }
        )
}

