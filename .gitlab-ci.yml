image: tmaier/docker-compose:19.03

services:
  - docker:19.03-dind

stages:
  - build
  - static analysis
  - test
  - clean-up
#  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  # Use the overlayfs driver for improved performance.
  DOCKER_DRIVER: overlay2
  # Disable TLS since we're running inside local network.
  DOCKER_TLS_CERTDIR: ""

  # Use Docker BuildKit for better caching and faster builds
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

  # Test images
  CLIENT_IMAGE: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_SHORT_SHA
  SERVER_IMAGE: $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHORT_SHA

# Jobs:
build-main:
  stage: build
  only: [main]
  before_script:
    - chmod u+x wait.sh && ./wait.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker-compose --env-file .env.release build --parallel
    - docker-compose --env-file .env.release push

build:
  stage: build
  except: [main]
  before_script:
    - chmod u+x wait.sh && ./wait.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker-compose --env-file .env.development build --parallel
    - docker-compose --env-file .env.development push

analysis-client:
  stage: static analysis
  except: [main]
  needs: [build]
  before_script:
    - apk add --no-cache bash
    - chmod u+x wait.sh && ./wait.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker run $CLIENT_IMAGE echo npx eslint .
    - echo "Static analysis on the client passed!"

analysis-server:
  stage: static analysis
  except: [main]
  needs: [build]
  before_script:
    - apk add --no-cache bash
    - chmod u+x wait.sh && ./wait.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker run $SERVER_IMAGE flake8 --max-line-length 99 --statistics .
    - echo "Static analysis on the server passed!"

test-client:
  stage: test
  except: [main]
  needs: [analysis-client]
  before_script:
    - apk add --no-cache bash
    - chmod u+x wait.sh && ./wait.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # npm test can be replaced with another script that runs the tests
    - docker run $CLIENT_IMAGE npm test
    - echo "Tests on the client passed!"

test-server:
  stage: test
  except: [main]
  needs: [analysis-server]
  before_script:
    - apk add --no-cache bash
    - chmod u+x wait.sh && ./wait.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker run $SERVER_IMAGE pytest
    # Using this for now since we don't have any tests
#    - docker run $SERVER_IMAGE sh -c 'pytest; ret=$?; [ $ret = 5 ] && exit 0 || exit $ret'
    - echo "Tests on the server passed!"

clean-up:
  stage: clean-up
  except: [main]
  variables:
    SERVER_IMAGE: $CI_PROJECT_PATH/server:$CI_COMMIT_SHORT_SHA
    CLIENT_IMAGE: $CI_PROJECT_PATH/client:$CI_COMMIT_SHORT_SHA
    REG_URL: "https://github.com/genuinetools/reg/releases/download/v$REG_VERSION/reg-linux-amd64"
    REG_SHA256: ade837fc5224acd8c34732bf54a94f579b47851cc6a7fd5899a98386b782e228
    REG_VERSION: 0.16.1
  before_script:
    - apk add --no-cache bash
    - apk add --no-cache curl
    - chmod u+x wait.sh && ./wait.sh
    - curl --fail --show-error --location $REG_URL --output /usr/local/bin/reg
    - echo "$REG_SHA256  /usr/local/bin/reg" | sha256sum -c -
    - chmod a+x /usr/local/bin/reg
  script:
    - /usr/local/bin/reg rm -d --auth-url $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $SERVER_IMAGE
    - /usr/local/bin/reg rm -d --auth-url $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CLIENT_IMAGE
    - echo "Test images deleted from the registry!"